{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AIRLab Guidelines","text":"<p>Hello researchers! </p> <p>As you begin your academic journey at the Artificial Intelligence and Robotics Lab (AIRLab), this guidebook is designed to be your essential companion. Please, read it carefully and refer to it while working with us. Should you have any questions, please reach out to your supervisor.</p>"},{"location":"#server-guidelines","title":"Server Guidelines","text":"<p>Our servers are the backbone of the research carried out at AIRLab. As they are shared resources supporting numerous users, it's crucial to  understand and follow these guidelines . Proper server usage ensures everyone can work seamlessly and efficiently. Remember, using our shared servers comes with the responsibility of ensuring fairness and care for all users.</p>"},{"location":"#thesis-guidelines","title":"Thesis Guidelines","text":"<p>Your thesis represents a culmination of your hard work and contribution to the field of AI and robotics. These guidelines will provide the instructions to articulate your research effectively, making sure your efforts stand out.</p> <p>Engage with this guide, stay curious, and let's make the most of your time at AIRLab! </p>"},{"location":"server_guidelines/additional/","title":"Additional info","text":"<p>You can find additional information on our servers (and on working @ AIRLab in general) in this presentation: Getting up to speed @ AIRLab</p>"},{"location":"server_guidelines/coding/","title":"Coding Survival Guide","text":"<p>Welcome to the Coding Survival Guide!   This guide is your key to becoming a respected coder and steering clear of those pesky coding headaches.</p> <p>During your thesis, you're going to write a substantial amount of code, and keeping it organized is crucial. Your code has a future beyond your initial writing. Others (and your future self) will need to understand what you've crafted. We're here to ensure that your code tells a good story , not a mystery novel .</p> <p>Here's the golden rule: DON'T wait until the last week of your thesis to embark on a cleaning spree. By that point, you'll be exhausted and fully immersed in writing your manuscript. Instead, we strongly recommend maintaining your code's cleanliness and organization as you go along. Think of it as keeping your workspace tidy; it makes working much more pleasant and efficient. Trust us, you'll thank yourself later! </p> <p>Alright! Ready to become a coding virtuoso?  Let's get started!</p>"},{"location":"server_guidelines/coding/#git","title":"Git","text":"<p>Git is a version control system, i.e., a tool used to track changes to your source code over time. It is crucial that you use Git for your research, starting from the very beginning of your thesis. </p> <p>You can host your git repository on GitHub, the most famous repository hosting platform. As a student, you can also benefit from the GitHub Student Developer Pack and obtain a Pro license for free.</p> <p>You should set up a private repository as soon as possible, and add your co-supervisors to it as member.</p>"},{"location":"server_guidelines/coding/#git-guides","title":"Git Guides","text":"<p>If you don't know how to use git, you should familiarize yourself with it.</p> <p>You can check out this course to learn the basics:</p> <ul> <li>MIT course - Version Control (Git)</li> </ul> <p>Here is a comprehensive guide from the official Git project:</p> <ul> <li>Pro Git book</li> </ul> <p>Finally, Atlassian (competitor of GitHub) has also a series of very nice tutorials on Git:</p> <ul> <li> <p>Atlassian Tutorials - Main page</p> </li> <li> <p>Atlassian Tutorials - Advanced topics</p> </li> <li> <p>Atlassian Tutorials - Git workflows (for the future; probably not needed for your thesis)</p> </li> </ul> <p>Notice that most IDEs (PyCharm, VS Code, ...) provide a set of tools to easily manage your repository. Check out their documentation for more info.</p>"},{"location":"server_guidelines/coding/#git-tips-requirements","title":"Git tips &amp; requirements","text":"<p>All the code All your code should be tracked in your git repository. The code in your repository should be self-contained and you should be able to use it on any machine (not just yours!). This means that your repository should contain all components necessary to make it work, or specify how to obtain them (e.g., with a <code>requirements.txt</code> file for your pip packages).</p> <p>Only the code Complementarily, do not add to your repository any file not necessary to deploy it on a new machine. These include executables, cache files, IDE-specific config files, etc. Additionally, NEVER add the data to your repo. Do however specify how to obtain, e.g., whether it is a public dataset or a custom dataset on our servers. To make sure none of these files are ever added, your repository should always contain a <code>.gitignore</code> file, specifying which files should not be tracked. Online you can find templates for any programming language (e.g., GitHub\u2019s collection of .gitignore file templates): you can start from any of them and customize it to your needs.  As an additional rule of thumb, you should never find yourself running <code>git add .</code>; always check which files are being added to your commits!</p> <p>Working versions It is suggested to have a <code>main</code> branch with the last working version of your code, and a <code>dev</code> branch for each of your new implementation/refactoring. Ideally, all commits should contain a working version; this must be true at least in the <code>main</code> branch.</p> <p>README file To help others and your future self use your code, add a <code>README.md</code> file to your repo and keep it updated. It should explain (at least):</p> <ol> <li>How to setup your project, including: which packages and libraries are required; how to obtain the data; how to build and run the docker image (if using docker).</li> <li>How to run your project, including: what are the \"main\" files, what they do and how to run them; any other configuration that can be customized.</li> </ol>"},{"location":"server_guidelines/coding/#coding-etiquette","title":"Coding Etiquette","text":"<p>It goes without saying, you should always comment your code. We expect to receive a guide of your whole codebase by the end of your thesis.</p> <p>Unless otherwise instructed, we encourage you to use notebooks only for visualization.</p> <p>You should follow as much as possible a programming style guide (rules for writing code and make it readable). We suggest:</p> <ul> <li> <p>Python: PEP 8 \u2013 Style Guide for Python Code.(Simple guide: How to Write Beautiful Python Code With PEP 8 \u2013 Real Python)</p> </li> <li> <p>C++: Google C++ Style Guide</p> </li> </ul>"},{"location":"server_guidelines/docker/","title":"Docker Survival Guide","text":"<p>Welcome to the Docker Survival Guide!  In this guide, we will walk you through the process of building Docker images on the AIRLab Servers. Docker allows you to create reproducible and isolated environments, ensuring consistent results across different systems. By following the steps below, you will be able to set up a Docker image with the necessary dependencies and a virtual environment to run your experiments seamlessly. </p>"},{"location":"server_guidelines/docker/#project-structure","title":"Project Structure","text":"<p>First, let's create a directory structure  for your project. This will help you keep the code organized and maintain a clean workspace. We recommend the following structure for your project:</p> <pre><code>~\n\u251c\u2500\u2500 &lt;my_project&gt;        # Your project directory\n\u2502   \u251c\u2500\u2500 src                 # Source code for your project\n\u2502   \u2502   \u251c\u2500\u2500 &lt;my_code&gt;.py\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 Dockerfile          # Dockerfile for building your image\n\u2502   \u251c\u2500\u2500 requirements.txt    # Python dependencies for your project\n\u2502   \u251c\u2500\u2500 .runconfigs         # Run configuration (more on that later)\n\u2502   \u251c\u2500\u2500 README.md           # Project description\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre> <p>A project folder will typically correspond to a git repository.</p>"},{"location":"server_guidelines/docker/#docker-image-definition","title":"Docker Image Definition","text":""},{"location":"server_guidelines/docker/#dockerfile","title":"Dockerfile","text":"<p>Open the Dockerfile with a text editor, and add the following content:</p> <pre><code># Start with a base Ubuntu image with CUDA and cuDNN pre-installed\nFROM nvidia/cuda:11.7.1-cudnn8-devel-ubuntu20.04\n\n# Install python3.10 and pip\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  build-essential ca-certificates python3.10 python3.10-dev python3.10-distutils git vim wget cmake python3-pip\nRUN ln -sv /usr/bin/python3.10 /usr/bin/python\nRUN ln -svf /usr/bin/python3.10 /usr/bin/python3\n\n# Install system dependencies\nRUN apt update &amp;&amp; apt install -y \\\n    build-essential \\\n    curl \\\n    software-properties-common \\\n    git \\\n    wget\n\n# Set the working directory\nWORKDIR /exp\n\n# Create a new virtual environment\nENV VIRTUAL_ENV=/opt/venv\nRUN python -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Enable Jupyter (remove comments if needed)\n# RUN pip install jupyter tornado nbconvert\n# RUN mkdir -p /.local\n# RUN chmod -R 777 /.local\n\n# Enable OpenCV  (remove comment if needed)\n# RUN apt install -y libsm6 libxext6 libxrender-dev ffmpeg\n\n# Install Python dependencies\nADD requirements.txt /tmp/requirements.txt\nRUN pip install -r /tmp/requirements.txt\n\nENV SHELL /bin/bash\n\nCMD [\"bash\"]\n</code></pre> <p>The <code>FROM</code> command specifies the base image for your Docker image. In this case, we are using an Nvidia image with CUDA and cuDNN pre-installed (in order to properly access the GPUs). You may use a different base image, depending on your requirements. For example, if you need to use TensorFlow, you can use the <code>tensorflow/tensorflow:latest-gpu</code> image, which comes also with the latest version of tensorflow pre-installed.</p> <p>If you plan to run Jupyter notebooks or OpenCV, you can decomment the related lines.</p> <p>If you need to install further apt packages, you can do so adding the following command before line <code>35</code>: <pre><code>RUN apt install -y &lt;apt packages&gt;\n</code></pre></p>"},{"location":"server_guidelines/docker/#requirements","title":"Requirements","text":"<p>Inside the <code>requirements.txt</code> file, list all the Python packages and dependencies required for your experiment. Each package should be on a separate line, following the format <code>package_name==version</code>. The version is optional but strongly recommended for future replicability.</p> <p>If you work with PyTorch, your <code>requirements.txt</code> file might look like this:</p> <pre><code>numpy==1.26.1\ntorch==1.13.1\nscikit-learn == 1.3.0\n</code></pre> <p>The same setup using Tensorflow would look like this:</p> <pre><code>numpy==1.26.1\ntensorflow==2.14.0\nscikit-learn == 1.3.0\n</code></pre> <p>Add all the necessary packages and their versions according to your experiment's requirements.  If you are not sure which packages you need, you can rely on pipreqs.</p>"},{"location":"server_guidelines/docker/#building-the-docker-image","title":"Building the Docker Image","text":"<p>To build the Docker image, navigate to the directory containing the Dockerfile and <code>requirements.txt</code> files. If you followed the project structure above, you can run the following command:</p> <pre><code>cd ~/&lt;my_new_project&gt;\n</code></pre> <p>Run the following command to build the image:</p> <pre><code>docker build --rm -t &lt;your_surname&gt;/&lt;image_name&gt;:&lt;version&gt; .\n</code></pre> <p>For example, if your surname is <code>rossi</code>, the image name is <code>deep_learning_shenanigans</code>, and the version is <code>v1</code>, you can run:</p> <pre><code>docker build --rm -t rossi/deep_learning_shenanigans:v1 .\n</code></pre> <p>This may take a few minutes to complete. Set back and relax </p>"},{"location":"server_guidelines/docker/#listing-docker-images","title":"Listing Docker Images","text":"<p>To visualize all the Docker images on the server, run:</p> <pre><code>docker image list\n</code></pre> <p>If you want to list only the images you created, run:</p> <pre><code>docker image list | grep &lt;your_surname&gt;\n</code></pre> <p>Lastly, if you want to remove one of your images, run:</p> <pre><code>docker rmi &lt;image_id&gt;  # example: docker rmi 9a6d05b964cb\n</code></pre> <p>You can obtain the image_id using the command <code>docker image list</code> seen above.</p>"},{"location":"server_guidelines/docker/#running-a-docker-container","title":"Running a Docker Container","text":"<p>The AIRLab Servers rely on a user-friendly script  to help you launch experiments with Docker. The script is called <code>run-docker</code>. Every time you execute a command using <code>run-docker</code>, the current folder will be mounted in the container file system under the <code>/exp</code> working directory. This means that you can access all the files in the current folder from within the container without the need to rebuild the Docker image.</p>"},{"location":"server_guidelines/docker/#configuring-run-docker","title":"Configuring run-docker","text":"<p><code>run-docker</code> can be configured by creating a <code>.runconfigs</code> file in the project folder. This file can be used to specify additional arguments to the <code>run-docker</code> command.</p> <p>Here are some cool things you can do with <code>.runconfigs</code>:</p> <pre><code># Docker run options\ndocker_args: -v ~/datasets/private/my_dataset:/data\n\n# Specify the name of the container\ncontainer_name: {user}_DeepLearningShenanigans_GPU{args.gpu}_{date}\n\n# Specify the Docker image to use\nimage_name: rossi/deep_learning_shenanigans:v1\n</code></pre> <p>Among the useful Docker arguments, you can specify the following:</p> <ul> <li><code>-v</code> to mount a folder in the container. Example: <code>-v ~/datasets/private/my_dataset:/data</code> mounts the folder   <code>~/datasets/private/my_dataset</code> in the container under the <code>/data</code> directory. In this way, you can access your dataset   from within the container.</li> <li><code>-p</code> to expose a port from the container to the host. Example: <code>-p 8899:8888</code> exposes port <code>8888</code> from the   container to port <code>8899</code> on the host. In this way, you can access Jupyter notebooks or TensorBoard loggers running   inside the container from your browser.</li> <li><code>-e</code> to set environment variables. Example: <code>-e PYTHONPATH=/exp</code> sets the environment variable <code>PYTHONPATH</code> to the   project root <code>/exp</code> in the container.</li> </ul> <p>You can find all arguments here.</p>"},{"location":"server_guidelines/docker/#running-the-docker-image","title":"Running the Docker Image","text":"<p>To run the Docker image, navigate to the project folder and run:</p> <pre><code>run-docker &lt;gpu_id or ''&gt; &lt;cpu_id or ''&gt; &lt;your_command&gt;\n</code></pre> <p>For example, if you want to run the script <code>main.py</code> on GPU 3 using the cores 8 to 16, you can run:</p> <pre><code>run-docker 3 8-16 python main.py\n</code></pre> <p>Lastly, if you do not want to use a GPU, write <code>''</code> instead of the GPU ID. For example, if you want to run the script <code>main.py</code> only on CPU, using the CPU cores 8 to 16, you can run:</p> <pre><code>run-docker '' 8-16 python main.py\n</code></pre>"},{"location":"server_guidelines/docker/#running-jupyter-notebooks","title":"Running Jupyter Notebooks","text":"<p>If you want to run a Jupyter notebook, you should add <code>-p 8899:8888</code> to the <code>docker_args</code> option in your <code>.runconfigs</code>. This exposes port <code>8888</code> on the container to port <code>8899</code> on the host. </p> <p>Then, you can run the container with the following command (e.g., on GPU 1 using the cores 0 to 7):</p> <pre><code>run-docker 1 0-7 jupyter notebook --ip=0.0.0.0 --no-browser\n</code></pre> <p>Now, you can access the Jupyter notebook from your browser at <code>http://&lt;server-ip-address&gt;:8899/?token=...</code>. You can find the <code>token</code> in the output of the <code>run-docker</code> command.</p>"},{"location":"server_guidelines/docker/#extending-your-docker-image","title":"Extending your Docker Image","text":"<p>This guide helped you set up a simple Docker image, which is already enough in most situations.</p> <p>Should you need further customization, you can check out the following repo with a more complete Docker template: https://github.com/PCudrano/docker_template</p> <p>You'll find that this image sets up a user with your same privileges in your docker container. This is needed if you need to access shared folders on the servers (e.g., shared datasets). Additionally, this image allows you to specify further apt packages you require through a specific file <code>apt_requirement.txt</code>, so that you ideally will never need to modify the Dockerfile directly.</p>"},{"location":"server_guidelines/shell/","title":"Shell Survival Guide","text":"<p>Welcome to the Shell Survival Guide!  In this guide, we will explore the basic tools and commands that will empower you to navigate and utilize the Linux shell efficiently on our AIRLab Servers. Whether you are new to the command line or looking to brush up your skills, this guide will equip you with the essential knowledge to streamline your machine learning experiments and research. </p> <p>The rest of this guide focuses on our <code>Westworld</code> server, but all other servers can be used in the same exact fashion.</p>"},{"location":"server_guidelines/shell/#connecting-to-the-server","title":"Connecting to the Server","text":"<p>To begin, you need to establish a secure connection to <code>Westworld</code> using SSH (Secure Shell). Follow the steps below to connect:</p> <ol> <li>Open your preferred terminal application.</li> <li>Use the following command to connect to the server:</li> </ol> <pre><code>ssh &lt;your_surname&gt;@&lt;westworld_ip&gt;\n</code></pre> <p>Replace username with your assigned Linux user account on <code>Westworld</code>.</p> <p>Enter your password when prompted. Congratulations! You are now connected to the <code>Westworld</code> Lab Server and ready to unleash the power of the Linux shell.  To log out of the server, simply run <code>exit</code>.</p>"},{"location":"server_guidelines/shell/#essential-commands","title":"Essential Commands","text":""},{"location":"server_guidelines/shell/#navigating-the-file-system","title":"Navigating the File System","text":"<ul> <li><code>ls</code>: List files and directories in the current directory.</li> <li><code>ls -a</code>: List all files and directories, including hidden files.</li> <li><code>cd</code>: Change directory. Use <code>cd &lt;directory&gt;</code> to navigate to a specific directory or <code>cd ..</code> to go up one level.</li> <li><code>pwd</code>: Print the current working directory.</li> <li><code>clear</code>: Clear the terminal screen for a fresh start.</li> </ul>"},{"location":"server_guidelines/shell/#file-operations","title":"File Operations","text":"<ul> <li><code>rm &lt;filename&gt;</code>: Remove files. Use with caution, as this command permanently deletes files. Add the <code>-r</code> flag to   remove directories recursively.</li> <li><code>mv &lt;source&gt; &lt;destination&gt;</code>: Move or rename files and directories.</li> <li><code>cp &lt;source&gt; &lt;destination&gt;</code>: Copy files and directories.</li> <li><code>mkdir &lt;dir_name&gt;</code>: Create a new directory.</li> <li><code>touch &lt;filename&gt;</code>: Create a new file.</li> <li><code>cat &lt;filename&gt;</code>: Display the contents of a file.</li> <li><code>less &lt;filename&gt;</code>: Display the contents of a file one page at a time. Use the arrow keys to navigate and <code>q</code> to exit.</li> </ul>"},{"location":"server_guidelines/shell/#monitoring-resources","title":"Monitoring Resources","text":"<ul> <li><code>htop</code>: Monitor system resources such as CPU and memory usage.</li> <li><code>nvidia-smi</code>: Display NVIDIA GPU usage and statistics.</li> <li><code>watch nvidia-smi</code>: Continuously monitor GPU usage and update the information periodically.</li> </ul>"},{"location":"server_guidelines/shell/#text-editing","title":"Text Editing","text":"<ul> <li><code>nano</code>: A simple text editor to create and edit files directly in the terminal. Use <code>nano &lt;filename&gt;</code> to open a file.</li> <li><code>vim</code>: A less simple (but more fun?) text editor. Use <code>vim &lt;filename&gt;</code> to open a file. You can find a tutorial here. (If you just ran it without reading the tutorial and don't know how to quit it, type <code>:q</code> )</li> </ul>"},{"location":"server_guidelines/shell/#file-transfer","title":"File Transfer","text":"<ul> <li><code>scp</code>: Securely copy files between your local machine and the <code>Westworld</code> Lab Server. Use the following syntax to copy   a   file from the server to your local machine:   <pre><code>scp &lt;your_surname&gt;@&lt;westworld_ip&gt;:/path/to/file/on/westworld /path/on/local/machine\n</code></pre></li> </ul>"},{"location":"server_guidelines/shell/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>history</code>: Display a list of previously executed commands.</li> <li><code>history | grep &lt;search_term&gt;</code>: Search for a specific command in the history.</li> </ul>"},{"location":"server_guidelines/shell/#command-help-and-documentation","title":"Command Help and Documentation","text":"<p>When in doubt or needing additional information about a specific command, Linux provides built-in help and documentation. Here are a few ways to access it:</p> <ul> <li><code>man</code>: The manual pages command. Use <code>man &lt;command&gt;</code> to display detailed information about a specific command.</li> <li><code>--help</code>: Many commands provide a brief overview of their usage and options when used with the <code>--help</code> flag.</li> </ul> <p>Remember, practice makes perfect! The more you use the Linux shell, the more comfortable you will become with these commands and tools. If you have any questions or need additional help, please reach out to the lab members.</p>"},{"location":"server_guidelines/shell/#advanced-topics","title":"Advanced topics","text":""},{"location":"server_guidelines/shell/#further-resources","title":"Further resources","text":"<p>You can find more details on how to use the shell and how to approach any computer science project in this very good MIT course: </p> <ul> <li>The Missing Semester of Your CS Education.</li> </ul>"},{"location":"server_guidelines/shell/#home-setup","title":"Home setup","text":"<p>When working on a shell system, you would typically set your home folder with all the necessary dotfiles once and for all. We suggest maintaining a repo of all your dotfiles for restoring your configs in the future. (Just be careful to keep the repo private in case you include sensitive information!)</p> <p>If you want, you can start from the following vim/bash/tmux environment with all the necessary dotfiles already set up:</p> <ul> <li>Paolo Cudrano - Home (bash)</li> </ul>"},{"location":"server_guidelines/tmux/","title":"Tmux Survival Guide","text":"<p>Welcome to the Tmux Survival Guide!  In this guide, you will learn how to leverage the power of Tmux to create persistent sessions on the AIRLab Servers.  Tmux is a terminal multiplexer that allows you to manage multiple sessions and windows within a single terminal, enabling you to keep your code running even when you log out of the server.  A quick reference of essential Tmux commands is available here. Let's dive in! </p>"},{"location":"server_guidelines/tmux/#setting-up-tmux","title":"Setting Up Tmux","text":"<p>To start using Tmux, follow these steps:</p> <ol> <li>Connect to an AIRLab Server using SSH as you did previously.</li> <li>Once connected, enter the following command to start a new Tmux session: <pre><code>tmux new -s &lt;session_name&gt;\n</code></pre> Replace <code>&lt;session_name&gt;</code> with a descriptive name for your session.</li> </ol> <p>Congratulations! You are now inside a Tmux session. You can execute commands and run processes as usual.  Please, note that sessions are persistent, which means that  they will continue running even if you log out of the server.</p>"},{"location":"server_guidelines/tmux/#basic-tmux-commands","title":"Basic Tmux Commands","text":"<p>Here are some essential Tmux commands to help you navigate and manage your sessions and windows.</p>"},{"location":"server_guidelines/tmux/#sessions","title":"Sessions","text":"<ul> <li> <p>Detaching from a Session: To detach from a Tmux session while keeping it running, press <code>Ctrl-b</code> followed by <code>d</code>. You will return to your regular shell while the Tmux session continues in the background.</p> </li> <li> <p>Reattaching to a Session: To reattach to a previously created Tmux session, use the following command: <pre><code>tmux a -t &lt;session_name&gt;\n</code></pre> Replace <code>&lt;session_name&gt;</code> with the name of the session you want to reattach to.</p> </li> <li> <p>Listing Sessions: To see a list of all active Tmux sessions, run: <pre><code>tmux ls\n</code></pre></p> </li> <li> <p>Killing a Session: To kill a Tmux session, run: <pre><code>tmux kill-session -t &lt;session_name&gt;\n</code></pre></p> </li> </ul>"},{"location":"server_guidelines/tmux/#windows-and-panes","title":"Windows and Panes","text":"<ul> <li> <p>Creating Windows: Within a Tmux session, you can create multiple windows to organize your work. Use the key combination <code>Ctrl-b</code> followed by <code>c</code> to create a new window.</p> </li> <li> <p>Renaming Windows: To rename a window, press <code>Ctrl-b</code> followed by <code>,</code> and enter the new name.</p> </li> <li> <p>Navigating between Windows: To navigate between different windows, press <code>Ctrl-b</code> followed by the window number (e.g., 0, 1, 2, etc.) or use the key combination <code>Ctrl-b</code> followed by <code>n</code> to go to the next window or <code>Ctrl-b</code> followed by <code>p</code> to go to the previous window.</p> </li> <li> <p>Splitting Panes: Tmux allows you to split windows into multiple panes, enabling you to view and interact with different terminal sessions simultaneously. Use <code>Ctrl-b</code> followed by <code>%</code> to split the current pane vertically and <code>Ctrl-b</code> followed by <code>\"</code> to split it horizontally.</p> </li> <li> <p>Navigating between Panes: To navigate between different panes, use the key combination <code>Ctrl-b</code> followed by an arrow key.</p> </li> <li> <p>Deleting Panes: To delete a pane, use the key combination <code>Ctrl-b</code> followed by <code>x</code>.</p> </li> </ul> <p>These are just a few of the many Tmux commands and features available. To explore more advanced functionalities and customization options, refer to the Tmux documentation. </p>"},{"location":"server_guidelines/tmux/#example-configuration","title":"Example Configuration","text":"<p>Here is an example of a Tmux session configuration to run your experiments smoothly while monitoring server resources. First, create a new Tmux session called <code>exps</code> : <pre><code>tmux new -s exps\n</code></pre> Then, split the window into two panes: <pre><code>Ctrl-b %\n</code></pre> In the left pane, start a <code>htop</code> session to monitor server resources: <pre><code>htop\n</code></pre> In the right pane, start a <code>watch nvidia-smi</code> session to monitor your GPU usage: <pre><code>watch nvidia-smi\n</code></pre> Rename the window to <code>monitor</code>: <pre><code>Ctrl-b ,\n</code></pre></p> <p>Create a new window to run your experiments: <pre><code>Ctrl-b c\n</code></pre> Rename the window to <code>exps</code>: <pre><code>Ctrl-b ,\n</code></pre> In the new window, start your experiment: <pre><code>python main.py\n</code></pre></p> <p>Finally, create a new window for running commands and navigating the file system: <pre><code>Ctrl-b c\n</code></pre> Rename the window to <code>shell</code>: <pre><code>Ctrl-b ,\n</code></pre></p> <p>At this point, you should have three windows: <code>monitor</code>, <code>exps</code>, and <code>shell</code>. You can navigate between them using</p> <ul> <li><code>Ctrl-b 0</code> for <code>monitor</code></li> <li><code>Ctrl-b 1</code> for <code>exps</code></li> <li><code>Ctrl-b 2</code> for <code>shell</code></li> </ul> <p>To detach from the session, press <code>Ctrl-b</code> followed by <code>d</code>. You can now log out of the server and close your terminal.  When you log back in, you can reattach to the session using: <pre><code>tmux a -t exps\n</code></pre></p>"},{"location":"server_guidelines/welcome/","title":"Server Guidelines","text":"<p>Welcome to the AIRLab Servers documentation!  This comprehensive guide will provide you with all the information you need to effectively utilize our server for your research experiments. By following these guidelines, you will be able to make the most of the available resources, schedule your experiments effectively, and maintain a clean and organized workspace on the server. We want to foster a collaborative and productive environment for all lab members, enabling groundbreaking research in Robotics and Machine Learning! </p>"},{"location":"server_guidelines/welcome/#duties-of-airlab-servers-users","title":"Duties of AIRLab Servers Users","text":"<p>As a new AIRLab member, you gain access to AIRLab Servers (<code>Westworld</code> and/or <code>Elysium</code>) for your research work. With being an AIRLab Servers user comes the responsibility  to adhere to the established rules and guidelines:</p> <ul> <li> <p>Account Usage  - Each student will be provided with a new Linux account on the server. This account   will have a   designated space limit of 20GB in the home <code>~</code> directory.  This space is meant for storing code   and small files only. For datasets and large files, you must use a specific directory   called <code>~/datasets/private</code>, which is a link to our   NAS system. Please ensure that you store your datasets in <code>~/datasets/private</code> to avoid exceeding   your space limit. To check the amount of space you are currently using, you can   run <code>ncdu -x ~</code>.</p> </li> <li> <p>Resource Booking  - To ensure fair resource allocation and effective sharing,  all cores and   GPUs on the server must be booked in advance. Please ask your co-supervisor for the links!   Before running your experiments, make sure to check the availability of the required resources and book them accordingly. Remember to book also the CPU cores you will require.</p> </li> <li> <p>Containerized Experiments  - It is mandatory to  run your code inside Docker   containers. Docker   provides a lightweight and isolated environment, ensuring consistency and reproducibility of your experiments. On this website, you will find a guide that will walk you through the process of setting up and using Docker containers for your experiments.</p> </li> <li> <p>Clear Documentation  -  We expect all lab members to maintain clear and organized   documentation for their projects. This includes a <code>README.md</code> file with a brief description of the project and how to use the code, a Dockerfile for building the Docker image, and a run configuration file for running the experiments. Always remember that   your scientific work may be used by other lab members in the future, so it is important to keep your code and   documentation clean and organized! </p> </li> </ul>"},{"location":"thesis_guidelines/research/","title":"How to Conduct Research for Your Thesis","text":"<p>As a new thesis student, effectively searching research articles is crucial. Understanding the various publication venues (workshops, conferences, and journals) will enhance the quality of your source material.  This guide outlines the types of publications, the strategies for finding research articles, and a recommended publication pathway to help you navigate your thesis journey.</p>"},{"location":"thesis_guidelines/research/#publication-venues","title":"Publication Venues","text":"<p>Different publication venues serve distinct purposes and stages of research. Here's a breakdown:</p> <ul> <li> Workshops: Informal gatherings focused on specific topics, ideal for early-stage research and obtaining feedback.</li> <li> Conferences: Formal events with rigorous peer review, suitable for presenting mature research with significant contributions.</li> <li> Journals: Periodical publications that showcase thoroughly vetted and comprehensive studies, often with high impact.</li> </ul>"},{"location":"thesis_guidelines/research/#types-of-publications","title":"Types of Publications","text":"<p>These are the most common types of publications you may encounter or consider for your research:</p> <ul> <li>Position Papers: Short statements expressing your viewpoint on specific issues, facilitating early discussions.</li> <li>Poster Presentations: Visual summaries of preliminary work, suitable for engaging with peers and receiving feedback.</li> <li>Preprint Papers: Early versions of research articles shared before formal peer review, often on platforms like arXiv.</li> <li>Short Papers: Concise reports on specific concepts or findings, maintaining the same standards as full papers but with limited scope.</li> <li>Full Papers: Comprehensive studies presenting significant research contributions, typically with stringent acceptance criteria.</li> <li>Survey Papers: Comprehensive reviews of existing literature, summarizing key findings and identifying research gaps.</li> </ul>"},{"location":"thesis_guidelines/research/#how-to-find-research-articles","title":"How to Find Research Articles","text":"<p>Begin by identifying key topics and research questions. Use appropriate keywords and search terms to guide your literature review. Consider the following resources:</p>"},{"location":"thesis_guidelines/research/#research-databases","title":"Research Databases","text":"<ul> <li>Google Scholar: Specialized search engine for academic articles and publications.</li> <li>arXiv: A preprint server for physics, mathematics, computer science, and other disciplines.</li> <li>PubMed: A repository of biomedical and life sciences literature.</li> <li>Scopus: A comprehensive research database with a query-based search engine for journal articles (requires PoliMI account).</li> </ul>"},{"location":"thesis_guidelines/research/#venue-quality-collections","title":"Venue Quality Collections","text":"<ul> <li>GGS Conference Rating: Provides a comprehensive list of computer science conferences and their rankings.</li> <li>Scimago Journal &amp; Country Rank: Provides journal rankings based on Scopus data.</li> </ul>"},{"location":"thesis_guidelines/research/#evaluating-research-articles","title":"Evaluating Research Articles","text":"<p>When selecting articles, assess their credibility and relevance:</p> <ol> <li>Peer Review Status: Prefer peer-reviewed publications for validated and credible research.</li> <li>Venue Prestige: Higher-ranked conferences and journals typically indicate higher quality.</li> <li>Impact Metrics: Use Impact Factor and citation counts to gauge the influence of the work.</li> <li>Content Quality: Ensure the research is thorough, methodologically sound, and adds novel insights to the field.</li> </ol>"},{"location":"thesis_guidelines/research/#publication-strategy","title":"Publication Strategy","text":"<p>If you want to publish your research effectively, consider the following strategy:</p> <ol> <li>Start with Workshops: Share preliminary ideas and receive constructive feedback.</li> <li>Progress to Conferences: Present more developed research and establish your presence in the field.</li> <li>Consolidate in Journals: Publish comprehensive and validated studies to achieve lasting impact.</li> </ol> <p> Avoid Multiple Submissions: Submit each paper to only one venue at a time and ensure originality to maintain your reputation and avoid disqualification.</p>"},{"location":"thesis_guidelines/research/#references","title":"References","text":"<ul> <li>Niklas Elmqvist, Workshops, Conferences, Journals \u2014 Oh My! (2020), Read Here.</li> </ul>"},{"location":"thesis_guidelines/writing/","title":"Thesis Guidelines","text":"<p>Welcome to the MSc Thesis Guide for students at the AIRLab. Please follow the resources provided below to ensure your thesis meets the required standards. </p>"},{"location":"thesis_guidelines/writing/#writing-guidelines","title":"Writing Guidelines","text":"<p>For specific indications on how to structure and write your thesis, please refer to the following document: How to Write a Thesis</p> <p> Please read this document carefully before starting to write your thesis!</p>"},{"location":"thesis_guidelines/writing/#thesis-resources","title":"Thesis Resources","text":"<p>Visit the AIRLab's dedicated page to access all the essential resources: Resources - AIRLab</p>"},{"location":"thesis_guidelines/writing/#thesis-latex-template","title":"Thesis LaTeX Template","text":"<p>To maintain consistency, we recommend using the official LaTeX template for your thesis: Download the LaTeX Template</p>"},{"location":"thesis_guidelines/writing/#presentation-ppt-template","title":"Presentation PPT Template","text":"<p>When you're ready to present your work, utilize our lab's PPT template for the presentation: Download the PPT Template</p> <p>Should you have any further questions, please reach out to your supervisor or the lab coordinator. Best of luck with your research and writing! </p>"}]}